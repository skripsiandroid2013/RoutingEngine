package id.ac.itats.skripsi.orm;

import id.ac.itats.skripsi.orm.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table WAY.
 */
public class Way {

    private Long id;
    private String wayID;
    private Long sourceNode;
    private Long targetNode;
    private Double weight;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WayDao myDao;

    private Node node;
    private Long node__resolvedKey;


    public Way() {
    }

    public Way(Long id) {
        this.id = id;
    }
    
    public Way(String wayID, Long sourceNode, Long targetNode, Double weight) {
        this.wayID = wayID;
        this.sourceNode = sourceNode;
        this.targetNode = targetNode;
        this.weight = weight;
    }

    public Way(Long id, String wayID, Long sourceNode, Long targetNode, Double weight) {
        this.id = id;
        this.wayID = wayID;
        this.sourceNode = sourceNode;
        this.targetNode = targetNode;
        this.weight = weight;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWayDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getWayID() {
        return wayID;
    }

    public void setWayID(String wayID) {
        this.wayID = wayID;
    }

    public Long getSourceNode() {
        return sourceNode;
    }

    public void setSourceNode(Long sourceNode) {
        this.sourceNode = sourceNode;
    }

    public Long getTargetNode() {
        return targetNode;
    }

    public void setTargetNode(Long targetNode) {
        this.targetNode = targetNode;
    }

    public Double getWeight() {
        return weight;
    }

    public void setWeight(Double weight) {
        this.weight = weight;
    }

    /** To-one relationship, resolved on first access. */
    public Node getNode() {
        Long __key = this.sourceNode;
        if (node__resolvedKey == null || !node__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NodeDao targetDao = daoSession.getNodeDao();
            Node nodeNew = targetDao.load(__key);
            synchronized (this) {
                node = nodeNew;
            	node__resolvedKey = __key;
            }
        }
        return node;
    }

    public void setNode(Node node) {
        synchronized (this) {
            this.node = node;
            sourceNode = node == null ? null : node.getNodeID();
            node__resolvedKey = sourceNode;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
